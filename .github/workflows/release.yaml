name: Draft Release
on:
  workflow_dispatch:
    # Enable manual workflow run
    inputs:
      tags:
        description: 'Test scenario tags' 
  push:
    branches:
      - main
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events that match "*". For example: "1.0", "20.15.10"


jobs:
  test-workflow:
    name: Test Workflows
    runs-on: ubuntu-latest
    steps:
      # Upload the build.
      - name: Get release tag version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - run: echo "Tag ${{ env.RELEASE_TAG }}"
      
      - name: Repository name
        run: echo $REPOSITORY_NAME
        
      - name: Get release tag version
        run: echo "BUILD_ASSET_NAME=${{ github.event.repository.name }}_something-${GITHUB_REF#refs/*/}.extension" >> $GITHUB_ENV

  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [Android] # [android, ios, linux, macos, windows, web]
        include:
          - os: ubuntu-20.04
            target: Android
            build_target: appbundle
            build_path: build/app/outputs/bundle/release
            asset_extension: .aab
            channel: stable
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    steps:
      # Set environment variables.
      - name: Get release tag version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create build asset name
        env:
          RELEASE_TARGET: ${{ matrix.target }}
        run: |
          echo "RELEASE_TARGET=${RELEASE_TARGET,,}" >> $GITHUB_ENV
          echo "BUILD_ASSET_NAME=${{ github.event.repository.name }}_${{ RELEASE_TARGET }}_${{ RELEASE_TAG }}${{ matrix.asset_extension }}" >> $GITHUB_ENV
      - name: Finished
        run: echo "$BUILD_ASSET_NAME" 
      # Set up Flutter.
#      - name: Clone Flutter repository with ${{ matrix.channel }} channel
#        uses: subosito/flutter-action@v1.5.3
#        with:
#          channel: ${{ matrix.channel }}
#
#      # Set up required dependencies.
#      - name: Install Linux dependencies
#        if: matrix.build_target == 'linux'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
#      - name: Install Android dependencies
#        if: matrix.build_target == 'android'
#        uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - name: Enable web support
#        if: matrix.build_target == 'web'
#        run: flutter config --enable-web
#      - name: Enable ${{ matrix.target }} desktop support
#        if: matrix.build_target == 'linux' || matrix.build_target == 'windows' || matrix.build_target == 'macos'
#        run: flutter config --enable-${{ matrix.build_target }}-desktop
#      - name: Run Flutter doctor
#        run: flutter doctor -v
#
#      # Clone the repository and get required packages.
#      - name: Clone the repository
#        uses: actions/checkout@v2
#        with:
#          repository: 'FerMod/flutter_notes'
#      - name: Get packages for the Flutter project
#        run: flutter pub get
#
#      # Build the application.
#      - name: Build project
#        run: flutter build -v ${{ matrix.build_target }} --release
#
#      # Prepare release build package.
#      - name: Copy VC redistributables to release directory for Windows
#        if: matrix.build_target == 'windows'
#        run: |
#          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
#          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
#          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .      
#      
#      # Set up env variables.
#      - name: Get release tag version
#        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Create build asset name
#        run: echo "BUILD_ASSET_NAME=${{ env.REPOSITORY_NAME }}_${{ matrix.build_target,, }}_${{ env.RELEASE_TAG }}${{ matrix.asset_extension }}" >> $GITHUB_ENV
#        
#      # Compress build.
#      - name: Compress build for Windows
#        if: matrix.build_target == 'windows'
#        run: compress-archive -Path * -DestinationPath ./${{ env.BUILD_ASSET_NAME }}
#        working-directory: ${{ matrix.build_path }}
#      - name: Compress build for Linux
#        if: matrix.build_target == 'linux' || matrix.build_target == 'web'
#        run: tar czf ./${{ env.BUILD_ASSET_NAME }} *
#        working-directory: ${{ matrix.build_path }}
#      - name: Compress build for macOS
#        if: matrix.build_target == 'macos'
#        run: ditto -c -k --sequesterRsrc --keepParent '*.app' ./${{ env.BUILD_ASSET_NAME }}
#        working-directory: ${{ matrix.build_path }}
#      - name: Rename build for Android
#        if: matrix.build_target == 'apk' || matrix.build_target == 'appbundle'
#        run: mv app-release${{ matrix.asset_extension }} ./${{ env.BUILD_ASSET_NAME }}
#        working-directory: ${{ matrix.build_path }}
#
#      # Upload the build.
#      - name: Upload release asset
#        id: upload_release_asset
#        uses: softprops/action-gh-release@v1
#        with:
#          name: Flutter Test v${{ env.RELEASE_TAG }}
#          draft: true
#          prerelease: false
#          files: |
#            ./${{ matrix.build_path }}/${{ env.BUILD_ASSET_NAME }}
