name: Draft Release
on:
  workflow_dispatch:
    # Enable manual workflow run
    inputs:
      tags:
        description: 'Test scenario tags' 
  push:
    branches:
      - main
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events that match "*". For example: "1.0", "20.15.10"


jobs:
  test-workflow:
    if: ${{ !always() }}
    name: Test Workflows
    runs-on: ubuntu-latest
    steps:
      # Upload the build.
      - name: Get release tag version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - run: echo "Tag ${{ env.RELEASE_TAG }}"
      
      - name: Repository name
        run: echo $REPOSITORY_NAME
        
      - name: Get release tag version
        run: echo "BUILD_ASSET_NAME=${{ github.event.repository.name }}_something-${GITHUB_REF#refs/*/}.extension" >> $GITHUB_ENV
  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [Android, Web] # [Android, iOS, Linux, macOS, Windows, Web]
        include:
          #- os: ubuntu-20.04
          #  target: Android
          #  build_target: apk
          #  build_path: build/app/outputs/apk/release
          #  asset_extension: .apk
          #  channel: stable
          - os: ubuntu-20.04
            target: Android
            build_target: appbundle
            build_path: build/app/outputs/bundle/release
            asset_extension: .aab
            channel: stable
          - os: ubuntu-20.04
            target: Web
            build_target: web
            build_path: build/web
            asset_extension: .tar.gz
            channel: stable
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    steps:
      # Set environment variables.
      - name: Get release tag version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create build asset name
        env:
          REPOSITORY_NAME: ${{ github.event.repository.name }}
          MATRIX_TARGET: ${{ matrix.target }}
        run: |
          export RELEASE_TARGET=$(echo "${MATRIX_TARGET,,}")
          echo "BUILD_ASSET_NAME=${{ env.REPOSITORY_NAME }}_${RELEASE_TARGET}_${{ env.RELEASE_TAG }}${{ matrix.asset_extension }}" >> $GITHUB_ENV
      
      # Set up Flutter.
      - name: Clone Flutter repository with ${{ matrix.channel }} channel
        uses: subosito/flutter-action@v1.5.3
        with:
          channel: ${{ matrix.channel }}

      # Set up required dependencies.
      - name: Install Linux dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - name: Install Android dependencies
        if: matrix.target == 'android'
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Enable web support
        if: matrix.target == 'web'
        run: flutter config --enable-web
      - name: Enable desktop support
        if: matrix.target == 'linux' || matrix.target == 'windows' || matrix.target == 'macos'
        run: flutter config --enable-${{ matrix.build_target }}-desktop
      - name: Run Flutter doctor
        run: flutter doctor -v

      # Clone the repository and get required packages.
      - name: Clone the repository
        uses: actions/checkout@v2
        with:
          repository: 'FerMod/flutter_notes'
      
      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-flutter
        with:
          path: |
            $PUB_CACHE
            $GITHUB_WORKSPACE/.dart_tool
            ~/.gradle/caches
            ~/.gradle/wrapper
          key:  ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - name: Get packages for the Flutter project
        run: flutter pub get

      # Build the application.
      - name: Build project
        run: flutter build -v ${{ matrix.build_target }} --release
      - name: Ls
        run: ls -la
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"

#     # Clone the repository and get required packages.
#     - name: Clone the repository
#       uses: actions/checkout@v2
#     - name: Get packages for the Flutter project
#       run: flutter pub get

      # Build the application.
      - name: Build project
        run: flutter build -v ${{ matrix.build_target }} --release

      # Prepare release build package.
      - name: Copy VC redistributables to release directory for Windows
        if: matrix.target == 'windows'
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
      # Compress build.
      - name: Compress build for Windows
        if: matrix.target == 'windows'
        run: compress-archive -Path * -DestinationPath ./${{ env.BUILD_ASSET_NAME }}
        working-directory: ${{ matrix.build_path }}
      - name: Compress build for Linux
        if: matrix.target == 'linux' || matrix.target == 'web'
        run: tar czf ./${{ env.BUILD_ASSET_NAME }} *
        working-directory: ${{ matrix.build_path }}
      - name: Compress build for macOS
        if: matrix.target == 'macos'
        run: ditto -c -k --sequesterRsrc --keepParent '*.app' ./${{ env.BUILD_ASSET_NAME }}
        working-directory: ${{ matrix.build_path }}
      - name: Rename build for Android
        if: matrix.target == 'android'
        run: mv app-release${{ matrix.asset_extension }} ./${{ env.BUILD_ASSET_NAME }}
        working-directory: ${{ matrix.build_path }}

      # Upload the build.
      - name: Upload release asset
        id: upload_release_asset
        uses: softprops/action-gh-release@v1
        with:
          name: Flutter Test v${{ env.RELEASE_TAG }}
          draft: true
          prerelease: false
          files: |
            ./${{ matrix.build_path }}/${{ env.BUILD_ASSET_NAME }}
